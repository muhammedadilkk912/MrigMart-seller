





import React, { useRef, useState } from 'react'
import Cropper from 'react-easy-crop'
const Banner = () => {
  const [image,setImage]=useState(null)
  const [crop,setCrop]=useState({x:0,y:0})
  const [zoom,setZoom]=useState(1)
  const [croppedAreaPixels,setCroppedAreaPixels]=useState(null)
  const [croppedImage,setCroppedImage]=useState(null)
  const imageRef=useRef()

 const onfilechange=(e)=>{
  console.log("inside image selected")
   if (e.target.files && e.target.files.length > 0) {
    const file=e.target.files[0]
    console.log("image=",file)
      const reader = new FileReader();
      reader.onload=()=>setImage(reader.result)
      reader.readAsDataURL(file)
     
    }

 }
 const onCropComplete=(croppedArea,croppedAreaPixels)=>{
  setCroppedAreaPixels(croppedAreaPixels)
 }
 console.log("selected image",image)

 const submitcrop=async()=>{
  if (!image || !croppedAreaPixels) return;
    const croppedImg = await getCroppedImg(image, croppedAreaPixels);
    setCroppedImage(croppedImg);
 }
    // Utility function to crop the image
  const getCroppedImg = (imageSrc, crop) => {
    return new Promise((resolve, reject) => {
      const image = new Image();
      image.src = imageSrc;
      image.onload = () => {
        const canvas = document.createElement("canvas");
        canvas.width = crop.width;
        canvas.height = crop.height;
        const ctx = canvas.getContext("2d");

        ctx.drawImage(
          image,
          crop.x,
          crop.y,
          crop.width,
          crop.height,
          0,
          0,
          crop.width,
          crop.height
        );

        resolve(canvas.toDataURL("image/png")); // Return cropped image as a Data URL
      };

      image.onerror = (error) => reject(error);
    });
  };

  return (
    <div className='bg-white p-5 space-y-6 '>
      <h1 className='font-bold text-2xl'>React easy cropper example</h1>
      {
        image?(
          <>
         
          <div className='relative w-full h-[400px]' >
            <Cropper
              image={image}
              crop={crop}
             
              zoom={zoom}
              aspect={16/ 9}
              onCropChange={setCrop}
              
              onCropComplete={onCropComplete}
              onZoomChange={setZoom}
            />

          </div>
          <button onClick={submitcrop} className=' p-2 border border-gray-400'>Apply crop</button></>

        ):(
          <input type="file"  accept='image/*' className='border ' onChange={onfilechange}/>
        )
      }
      {
        croppedImage&&(
          <div className='w-full h-full flex justify-center'>
            <img src={croppedImage} alt="" className='max-w-60 object-cover' />

          </div>
        )
      }
      
    </div>
  )
}

export default Banner
