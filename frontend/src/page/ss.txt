<div className="flex flex-col sm:flex-row items-center justify-between pt-4 border-t border-gray-200">
        {/* Showing X to Y of Z items */}
        <div className="mb-4 sm:mb-0">
          <p className="text-sm text-gray-700">
            Showing <span className="font-medium">1</span> to{" "}
            <span className="font-medium">10</span> of{" "}
            <span className="font-medium">{totalusers}</span> users
          </p>
        </div>

        {/* Pagination controls */}
        {totalpage > 1 && (
          <div className="flex items-center space-x-1">
            {/* Previous button (disabled) */}
            <button
              onClick={() => gotopage(page - 1)}
              disabled={page === 1}
              className={`px-3 py-1 border rounded-md text-sm font-medium ${
                page === 1
                  ? "border-gray-400 text-gray-400 cursor-not-allowed"
                  : "border-gray-700 text-gray-700 hover:bg-gray-50"
              }`}
            >
              <FiChevronLeft className="h-5 w-5" />
            </button>
            {/* <button className="px-3 py-1 border rounded-md text-sm font-medium bg-blue-50 border-red-500 text-blue-600">
                          {page}
                        </button> */}

            {getPageNumbers().map((p, idx) =>
              p === "..." ? (
                <span key={idx} className="px-2 text-gray-500">
                  ...
                </span>
              ) : (
                <button
                  key={p}
                  onClick={() => gotopage(p)}
                  className={`px-3 py-1 border rounded-md text-sm font-medium ${
                    page === p
                      ? "bg-blue-50 border-blue-500 text-blue-600"
                      : "bg-white border-gray-300 text-gray-700 hover:bg-gray-50"
                  }`}
                >
                  {p}
                </button>
              )
            )}

            {/* Next button */}
            <button
              onClick={() => gotopage(page + 1)}
              disabled={page === totalpage}
              className={`px-3 py-1 border rounded-md text-sm font-medium ${
                page === totalpage
                  ? "border-gray-400 text-gray-400 cursor-not-allowed"
                  : "border-gray-700 text-gray-700 hover:bg-gray-50"
              }`}
            >
              <FiChevronRight className="h-5 w-5" />
            </button>
          </div>
        )}
      </div>

      // dropdwon


      <div className="py-1">
              {/* Active Option */}
              <button
                className={`flex items-center px-4 py-2 text-sm w-full text-left ${
                  val.status === "active"
                    ? "bg-blue-50 text-blue-600"
                    : "hover:bg-gray-100 text-gray-700"
                }`}
                onClick={(e) => {
                  change_status(val._id, val.status, "Active");
                  closeDropdown();
                }}
              >
                <span
                  className={`w-2 h-2 rounded-full mr-2 ${
                    val.status === "Active" ? "bg-blue-500" : "bg-gray-300"
                  }`}
                ></span>
                Active
              </button>
      
              {/* Suspend Option */}
              <button
                onClick={() => {
                  change_status(val._id, val.status, "suspend");
                }}
                className={`flex items-center px-4 py-2 text-sm w-full text-left ${
                  val.status === "suspend"
                    ? "bg-red-50 text-red-600"
                    : "hover:bg-gray-100 text-gray-700"
                }`}
              >
                <span
                  className={`w-2 h-2 rounded-full mr-2 ${
                    val.status === "Suspend" ? "bg-red-500" : "bg-gray-300"
                  }`}
                ></span>
                Suspend
              </button>
              
              <button
                className={`flex items-center px-4 py-2 text-sm w-full text-left ${
                  val.status === "Inactive"
                    ? "bg-red-50 text-red-600"
                    : "hover:bg-gray-100 text-gray-700"
                }`}
                onClick={() => {
                  change_status(val._id, val.status, "Inactive");
                }}
              >
                <span
                  className={`w-2 h-2 rounded-full mr-2 ${
                    val.status === "Inactvie" ? "bg-red-500" : "bg-gray-300"
                  }`}
                ></span>
                InActive
              </button>
            </div>


            //bannner content
            import { useState, useEffect, useCallback, useRef } from 'react';
import axiosInstance from '../configure/axios';
import { useDispatch } from 'react-redux';
import { showLoading, hideLoading } from '../Redux/LoadingSlic';
import Cropper from 'react-easy-crop'
import {toast} from 'react-toastify'
import { FaEdit } from "react-icons/fa";
import { MdDelete } from "react-icons/md";
import { isAction } from '@reduxjs/toolkit';




const Banner = () => {
  const dispatch = useDispatch();
  const [banners, setBanners] = useState([]);
  const [product,setProducts]=useState([])
  const [showForm, setShowForm] = useState(false);
  const [newBanner, setNewBanner] = useState({
    image: null,
    link: '',
    isActive: true,
   
  });
  const [edit,setEdit]=useState(null)
  const [image,setImage]=useState(null)
  const [error, setError] = useState('');
  const [showCropModal,setShowCropModal]=useState(null)
    
    const [crop,setCrop]=useState({x:0,y:0})
    const [zoom,setZoom]=useState(1)
    const [croppedAreaPixels,setCroppedAreaPixels]=useState(null)

    console.log("products==",product)


  // Fetch existing banners
  useEffect(() => {
   

    fetchBanners()
  }, []);

  const handleInputChange = (e) => {
    const { name, value, type, checked } = e.target;
    setNewBanner({
      ...newBanner,
      [name]: type === 'checkbox' ? checked : value
    });
  };
   const fetchBanners = async () => {
      try {
        dispatch(showLoading());
        const response = await axiosInstance.get('/seller/existingbanners');
        console.log(response)
        setBanners(response.data.banners || []);
        setProducts(response.data.products || [])
      } catch (err) {
        console.log(err)
        setError('Failed to fetch banners');
      } finally {
        dispatch(hideLoading());
      }
    };


  const handleFileChange = (e) => {
    if (e.target.files && e.target.files.length > 0) {
      const reader = new FileReader();
      reader.addEventListener('load', () => setImage(reader.result));
      setShowCropModal(true)
      reader.readAsDataURL(e.target.files[0]);
    }
  };
   const onCropComplete=(croppedArea,croppedAreaPixels)=>{
  setCroppedAreaPixels(croppedAreaPixels)
 }
 const applyCrop = async () => {
  console.log("inside the cropped image");

  if (!image || !croppedAreaPixels) return;

  const croppedImg = await getCroppedImg(image, croppedAreaPixels);
  console.log(croppedImg);

  setNewBanner((prev) => ({
    ...prev,
    image: croppedImg,
  }));

  setShowCropModal(false);
};

 console.log("new banner=",newBanner)
    // Utility function to crop the image
  const getCroppedImg = (imageSrc, crop) => {
    return new Promise((resolve, reject) => {
      const image = new Image();
      image.src = imageSrc;
      image.onload = () => {
        const canvas = document.createElement("canvas");
        canvas.width = crop.width;
        canvas.height = crop.height;
        const ctx = canvas.getContext("2d");

        ctx.drawImage(
          image,
          crop.x,
          crop.y,
          crop.width,
          crop.height,
          0,
          0,
          crop.width,
          crop.height
        );

        resolve(canvas.toDataURL("image/png")); // Return cropped image as a Data URL
      };

      image.onerror = (error) => reject(error);
    });
  };




const handleSubmit=async(e)=>{
 e.preventDefault()
 if(newBanner.image==''){
  toast.error('image is required')
  return null
 }
 try {
  dispatch(showLoading())           
  // const formData=new FormData
  // // formData.append('image',JSON.stringify(newBanner.image))
  // // formData.append('link',JSON.stringify(newBanner.link))
  // formData.append('image',newBanner.image)
  //  formData.append('link',newBanner.link)
  // formData.append('isActive',JSON.stringify(newBanner.isActive))
  // const response =await axiosInstance.post('/seller/add_banner',formData,{
  //        headers:{'Content-Type':'multipart/form-data'}
  //     })
  const response=await axiosInstance.post('/seller/add_banner',newBanner)
  console.log(response)
  toast.success(response?.data?.message)
  setShowForm(false)
  setNewBanner({})
  fetchBanners()
 } catch (error) {
  console.log(error)
 }finally{
  dispatch(hideLoading())
 }
 console.log("new banner=",newBanner)
}

 

  const handleDelete = async (id) => {
    console.log("delete id=",id)
    // if (!window.confirm('Are you sure you want to delete this banner?')) return;

    try {
      dispatch(showLoading());
     const response=await axiosInstance.delete(`/seller/delete_banner/${id}`)
     toast.success(response?.data?.message)
     fetchBanners()
    } catch (err) {
      console.log(err)
    } finally {
      dispatch(hideLoading());
    }
  };
  const editval=()=>{
    console.log(Object.keys(newBanner))
    const c=Object.keys(newBanner).some((val)=>{
      console.log(newBanner[val],"=",edit[val])
      
      
      // console.log("check=",newBanner[val])
     return edit[val]!== newBanner[val]
    }
    )
    return c
  }

  const handleEdit=(val)=>{
    console.log(val)
    setNewBanner({image:val.image,isActive:val.isActive,link:val.link})
    setEdit(val)
    console.log(newBanner)
    setShowForm(true)
    
  }

  const handleEditSubmit=async(e)=>{
   
    e.preventDefault()
    console.log("nnn=",newBanner)
    if(!newBanner.image){
      toast.warning('no changes are made')
      return null
    }
    let validation=editval()
    if(validation){
      let obj={}
      if(edit.image!==newBanner.image){
        obj.image=newBanner.image

      }
      if(edit.isActive!== newBanner.isActive){
        obj.isActive=newBanner.isActive
      }
      if(edit.link !== newBanner.link){
        obj.link=newBanner.link
      }
      console.log("obj=",obj)
      
      try {
        dispatch(showLoading())      
        const response=await axiosInstance.put(`/seller/update_banner/${edit._id}`,obj)
        console.log(response)
        toast.success(response?.data?.message)
        setShowForm(false)
        setNewBanner({})
        fetchBanners()
        
      } catch (error) {
        console.log("error in edit banner=",error)
      }finally{
        dispatch(hideLoading())
      }
    }
    console.log("val change",editval())
  }
 console.log("edit data=",edit)
  return (
    <div className="container mx-auto px-4 py-8">
      {/* Crop Modal */}
      {showCropModal && (
  <div className="fixed inset-0 backdrop-blur-sm flex items-center justify-center z-50 p-4">
    <div className="bg-gray-100 rounded-lg p-6 max-w-2xl w-full">
      <h2 className="text-xl font-semibold mb-4">Crop Image</h2>

      {/* Cropper with fixed height */}
      <div className="relative w-full h-[400px] bg-black rounded-md overflow-hidden">
        {image && (
          <Cropper
            image={image}
            crop={crop}
            zoom={zoom}
            aspect={16 / 9}
            onCropChange={setCrop}
            onCropComplete={onCropComplete}
            onZoomChange={setZoom}
          />
        )}
      </div>

      {/* Buttons */}
      <div className="mt-4 flex justify-end gap-4">
        <button
          onClick={() => {
            setShowCropModal(false);
            setNewBanner((prev) => ({
              ...prev,
              image:null
            }));
          }}
          className="px-4 py-2 bg-gray-200 text-gray-800 rounded-md hover:bg-gray-300"
        >
          Cancel
        </button>
        <button
          onClick={applyCrop}
          className="px-4 py-2 bg-indigo-600 text-white rounded-md hover:bg-indigo-700"
        >
          Apply Crop
        </button>
      </div>
    </div>
  </div>
)}


      <div className="flex justify-between items-center mb-6">
        <h1 className="text-2xl font-bold">Banner Management</h1>
        <button
          onClick={() => setShowForm(!showForm)}
          className="sm:px-4 px-1 py-1  sm:py-2 sm:text-sm bg-indigo-600 text-white rounded-md hover:bg-indigo-700"
        >
          {showForm ? 'Cancel' : 'ADD '}
        </button>
      </div>

      {/* Add Banner Form */}
      {showForm && (
        <div className="bg-white rounded-lg shadow-md p-6 mb-8">
          <h2 className="text-xl font-semibold mb-4">Add New Banner</h2>
          <form onSubmit={edit? handleEditSubmit:handleSubmit}>
            <div className="grid grid-cols-1 gap-6">
              {/* Image Upload with Preview */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Banner Image *
                </label>
                <div className="flex flex-col items-start gap-4">
                  {newBanner.image ? (
                    <div className="relative">
                      <img
                        src={newBanner?.image}
                        alt="Banner Preview"
                        className="max-w-full max-h-48 object-contain border rounded"
                      />
                      <button
                        type="button"
                        onClick={() => setNewBanner(prev => ({
                          ...prev,
                          image: null,
                          imagePreview: null,
                          originalImage: null
                        }))}
                        className="absolute top-2 right-2 bg-red-500 text-white rounded-full p-1 hover:bg-red-600"
                      >
                        <svg
                          xmlns="http://www.w3.org/2000/svg"
                          className="h-5 w-5"
                          viewBox="0 0 20 20"
                          fill="currentColor"
                        >
                          <path
                            fillRule="evenodd"
                            d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z"
                            clipRule="evenodd"
                          />
                        </svg>
                      </button>
                    </div>
                  ) : null}
                  <label className="cursor-pointer bg-gray-100 hover:bg-gray-200 px-4 py-2 rounded-md text-sm font-medium text-gray-700">
                    Choose Image
                    <input
                      type="file"
                      accept="image/*"
                      onChange={handleFileChange}
                      className="hidden"
                      
                    />
                  </label>
                  <p className="text-xs text-gray-500">
                    Recommended size: 1200x400px (will be cropped to ratio)
                  </p>
                </div>
              </div>

              {/* Optional Link */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Link (optional)
                </label>
                <select name="link" id="" value={newBanner.link} onChange={handleInputChange} className='w-full border h-10 outline-none rounded-md border-gray-400'>
                  <option value="">{product?.length>0?"select the product":"you dont have products" }</option>
                  {
                    product?.length>0 && product.map((val)=>(
                      <option value={val?._id}>{val?.name}</option>

                    ))

                    
                  }
                  
                </select>
                {/* <input
                  type="url"
                  name="link"
                  value={newBanner.link}
                  onChange={handleInputChange}
                  placeholder="https://example.com"
                  className="w-full px-3 py-2 border border-gray-300 rounded-md"
                /> */}
              </div>

              {/* Active Status */}
              <div className="flex items-center">
                <input
                  type="checkbox"
                  name="isActive"
                  checked={newBanner.isActive}
                  onChange={handleInputChange}
                  className="h-4 w-4 text-indigo-600 focus:ring-indigo-500 border-gray-300 rounded"
                />
                <label className="ml-2 block text-sm text-gray-700">
                  Active
                </label>
              </div>
            </div>

            <div className="mt-6 flex gap-4">
              <button
                type="submit"
                // disabled={!newBanner.image}
                className={`px-4 py-2 text-white rounded-md ${
                  newBanner.image
                    ? 'bg-indigo-600 hover:bg-indigo-700'
                    : 'bg-indigo-400'
                }`}
              >
                Add Banner
              </button>
              <button
                type="button"
                onClick={() => setShowForm(false)}
                className="px-4 py-2 bg-gray-200 text-gray-800 rounded-md hover:bg-gray-300"
              >
                Cancel
              </button>
            </div>
          </form>

          {error && <p className="mt-4 text-red-500">{error}</p>}
        </div>
      )}

      {/* Existing Banners */}
      <div className="bg-white rounded-lg shadow-md p-6">
        <h2 className="text-xl font-semibold mb-4">Current Banners</h2>
        
        {banners && banners.length > 0 ? (
    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
      {banners.map((banner) => {
        const statusClass =
          banner.status === 'Pending'
            ? 'bg-orange-500'
            : banner.status === 'Inactive'
            ? 'bg-gray-500'
            : 'bg-green-500';

        return (
          <div
            key={banner._id}
            className="border relative rounded-lg overflow-hidden shadow-sm hover:shadow-lg transition duration-300"
           >
            <img
              src={banner.image}
              alt="Banner"
              className="w-full h-48 object-cover"
            />
            <button
                    onClick={() => handleDelete(banner._id)}
                    className="text-red-500 absolute top-3 right-2 bg-gray-300 hover:bg-gray-400  opacity-70 rounded p-1 hover:text-red-800 text-sm"
                  >
                    <MdDelete  className='w-5 h-5'/>

                    
                  </button>

            <div className="p-4 space-y-2">
              {/* {banner.link && (
                <p className="text-sm text-gray-600 truncate">
                  <a
                    href={banner.link}
                    target="_blank"
                    rel="noopener noreferrer"
                    className="text-indigo-600 hover:underline"
                  >
                    {banner.link}
                  </a>
                </p>
              )} */}

              <div className="flex items-center justify-between">
                <span
                  className={`px-3 py-1 text-xs rounded-full font-medium text-white ${statusClass}`}
                >
                  {banner.status}
                </span>

                <div className="flex gap-3 items-center">
                  {banner.status === 'Inactive' && (
                    <button
                      onClick={() => handleEdit(banner)}
                      className="text-blue-600 hover:text-blue-800 text-sm"
                    >
                      <FaEdit  className='h-5 w-5'/>
                    </button>
                  )}
                 
                </div>
                 
              </div>
            </div>
          </div>
        );
      })}
          </div>
        ) : (
          <p className="text-gray-500">No banners found</p>
        )}
      </div>
    </div>
  );
};

export default Banner;